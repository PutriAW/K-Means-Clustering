# -*- coding: utf-8 -*-
"""k-means clustering non library.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yS5o9OtA8_JDsoqcfM4qmqVHS8ktEIDF
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import random

!pip install xlsxwriter 
import xlsxwriter

def distance(ctr, point):   # count the distance between data and centroid using eulidean distance
  x = ctr[0]-point[0]
  y = ctr[1]-point[1]
  # print(x,y)
  dis = np.sqrt(np.sum(x**2+y**2))
  return dis

def clusterLabel(listJ, data, centroid):  #determine  the cluster of a data
  choosenCluster = min(listJ, key=listJ.get)
  return [choosenCluster, data, centroid[choosenCluster]]

def newCentroid(pointL,centL):
    centNL = []
    for i in range(len(centL)):
        x = 0
        y = 0
        jum = 0
        for j in range(len(pointL)):
          # print(pointL[j][0] , i)
          if pointL[j][0] == i:
            x += pointL[j][1][0] 
            y += pointL[j][1][1]
            jum += 1
        # print(x,y)
        xMeans = x/jum
        yMeans = y/jum
        centNL.append([xMeans,yMeans])
    return centNL

def kMeansAlgo(dataL, centL, tIter):
  cluster = []
  k = len(centL)
  for i in range(tIter):
    clusterT = []
    for j in range(len(dataL)):
      distL = {}
      for l in range(k):
        distL[l] = distance(dataL[j],centL[l])
      clusterT.append(clusterLabel(distL,dataL[j],centL))
    centT = centL
    centL= newCentroid(clusterT, centT)
    
    if centT == centL or i== tIter- 1:
      cluster = clusterT
      break;
  return cluster,centL

data = pd.read_excel("dataset.xlsx",usecols=[1,2]) # read data from excel
dataL = []
for i in range(len(data)):
  dataL.append([data.x[i],data.y[i]])

listR = [] # list to store initial random point for centroid
for i in range(3):
  rand_x = random.randint(5,88) # random x point
  rand_y = random.randint(2,85) # random y point
  listR.append([rand_x,rand_y])

listR

nIter = 100
cluster = []
cluster,centL = kMeansAlgo(dataL, listR,nIter)

numList = []
xList = []
yList = []
centrL = []

for i in range(len(cluster)):
  numList.append(i+1)
  xList.append(cluster[i][1][0])
  yList.append(cluster[i][1][1])
  centrL.append(cluster[i][0])

hasil = []
for j in range(len(cluster)):
  hasil.append([numList[j],xList[j],yList[j],centrL[j]])


df = pd.DataFrame(hasil)
writer = pd.ExcelWriter('Result.xlsx', engine='xlsxwriter')
df.to_excel(writer,sheet_name='Hasil K3',index=False)
writer.save()

centX = []
centY = []
for it in range(len(centL)):
  centX.append(centL[it][0])
  centY.append(centL[it][1])

print("Centroid Terbaik : ",centL)
# plt.scatter(xList, yList, c='red')
output = plt.scatter(xList, yList, s = 80, c = 'red')
plt.colorbar(output)
plt.scatter(centX[0], centY[0], c ='blue', s=120, label="Cluster 0")
plt.scatter(centX[1], centY[1], c ='green', s=120, label = "Cluster 1")
plt.scatter(centX[2], centY[2], c ='black', s=120, label = "Cluster 2")
plt.legend()
plt.savefig("final.png")
plt.show()


